<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified" targetNamespace="http://innodatalabs.com/innodom" 
    xmlns:inno="http://innodatalabs.com/innodom">

    <xs:element name="dom" type="inno:DomType" />

    <xs:complexType name="DomType">
        <xs:annotation>
            <xs:documentation>
            Top-level element, wraps metadata and content.
            </xs:documentation>
        </xs:annotation>
        <xs:all>
            <xs:element name="meta" type="inno:MetaType" minOccurs="0" />
            <xs:element name="content" type="inno:ContentType" />
        </xs:all>
    </xs:complexType>

    <xs:complexType name="MetaType">
        <xs:annotation>
            <xs:documentation>
            Document metadata - a set of datapoints. Information extraction is essentially
                a creation of this datapoint set. 
            The sequence of datapoints is unordered. Datapoints order should not be used to infer 
                reading order or grouping or importance.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element name="datapoint" type="inno:DatapointType"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="DatapointType">
        <xs:annotation>
            <xs:documentation>
            Metadata datapoint - a key-value pair with the optional reference to the supporting text in the content,
            and optional confidence value.
            </xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="key" use="required" type="xs:string">
                    <xs:annotation>
                        <xs:documentation>
                        Datapoint key. By convention, we organize key names in a hierarchy using dot as a delimiter, for example:
                            "author.name", "author.email"
                        The hierarchy also allows arrays, where we use digits to indicate the index, for example:
                            "reference.1.title", "reference.2.title"
                        The list of available datapoint keys is defined by the taxonomy.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="confidence" type="xs:decimal">
                    <xs:annotation>
                        <xs:documentation>
                        Confidence pertaining to this datapoint.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="idref" type="xs:IDREF">
                    <xs:annotation>
                        <xs:documentation>
                        Points to the most specific content element supporting this datapoint.
                        Taxonomy determines if this attribute is required or not.
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
                <xs:attribute name="point" type="xs:string" />
                <xs:attribute name="point_order" type="xs:decimal" />
                <xs:attribute name="group" type="xs:string" />
                <xs:attribute name="group_order" type="xs:decimal" />
                <xs:attribute name="format" type="xs:string" />
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="ContentType">
        <xs:annotation>
            <xs:documentation>
            Structured document content.
            </xs:documentation>
        </xs:annotation>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="table" type="inno:TableType" />
            <xs:element name="text" type="inno:TextType" />
            <xs:element name="math" type="inno:TextType" />
            <xs:element name="image" type="inno:ImageType" />
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="TextType">
        <xs:annotation>
            <xs:documentation>
            Paragraph of text. Contains one or more layout blocks.
            Most of the paragraphs will have just one block. But when paragraph is split across pages or columns,
            we will have two (or - very rarely - more) blocks here.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="block" type="inno:TextBlockType" />
        </xs:sequence>
        <xs:attribute name="id" use="required" type="xs:ID"/>
        <xs:attribute name="type" type="xs:string" />
    </xs:complexType>

    <xs:complexType name="TextBlockType">
        <xs:annotation>
            <xs:documentation>
            A block of rich text.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="inno:RichTextType">
                <xs:attributeGroup ref="inno:BlockAttributes" />
                <xs:attribute name="ocr-confidence" type="xs:decimal"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:attributeGroup name="BlockAttributes">
        <xs:attribute name="page" type="xs:integer">
            <xs:annotation>
                <xs:documentation>
                Page number of this block of text.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="page-height" type="xs:integer"/>
        <xs:attribute name="page-width" type="xs:integer"/>
        <xs:attribute name="x-max" type="xs:decimal"/>
        <xs:attribute name="x-min" type="xs:decimal"/>
        <xs:attribute name="y-max" type="xs:decimal"/>
        <xs:attribute name="y-min" type="xs:decimal"/>
        <xs:attribute name="continued-from" type="xs:string">
            <xs:annotation>
                <xs:documentation>
                Indicates that this block is a continuation of a previous block
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:attributeGroup>

    <xs:complexType name="TableType">
        <xs:annotation>
            <xs:documentation>
            Table. Contains one or more layout blocks.
            Most of the tables will have just one block. But sometimes table is split acriss multiple pages
            and has more than one layout block.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="block" type="inno:TableBlockType" />
        </xs:sequence>
        <xs:attribute name="id" use="required" type="xs:ID"/>
        <xs:attribute name="type" type="xs:string" />
    </xs:complexType>

    <xs:complexType name="TableBlockType">
        <xs:annotation>
            <xs:documentation>
            A block of table content.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="tr" maxOccurs="unbounded" type="inno:TableRowType" />
        </xs:sequence>
        <xs:attributeGroup ref="inno:BlockAttributes" />
        <xs:attribute name="ocr-confidence" type="xs:decimal"/>
    </xs:complexType>

    <xs:complexType name="TableRowType">
        <xs:annotation>
            <xs:documentation>
            A row of table.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="td" maxOccurs="unbounded" type="inno:TableCellType" />
        </xs:sequence>
        <xs:attribute name="row" type="xs:integer"/>
    </xs:complexType>

    <xs:complexType name="TableCellType">
        <xs:annotation>
            <xs:documentation>
            Table cell
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="inno:RichTextType">
                <xs:attribute name="col" type="xs:integer"/>
                <xs:attribute name="colspan" type="xs:integer"/>
                <xs:attribute name="rowspan" type="xs:integer"/>
                <xs:attribute name="bbox" type="inno:BoundingBox"/>
                <xs:attribute name="id" type="xs:ID"/>
                <xs:attribute name="x-max" type="xs:decimal"/>
                <xs:attribute name="x-min" type="xs:decimal"/>
                <xs:attribute name="y-max" type="xs:decimal"/>
                <xs:attribute name="y-min" type="xs:decimal"/>
                <xs:attribute name="cell-bbox" type="inno:BoundingBox"/> <!-- Only in OCR workflow -->
                <xs:attribute name="content-bbox" type="inno:BoundingBox"/> <!-- Only in OCR workflow -->
                <xs:attribute name="valign" type="inno:VerticalAlignment"/> <!-- Only in OCR workflow -->
                <xs:attribute name="halign" type="inno:HorizontalAlignment"/> <!-- Only in OCR workflow -->
                <xs:attribute name="ocr-confidence" type="xs:decimal"/> <!-- Only in OCR workflow -->
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ImageType">
        <xs:annotation>
            <xs:documentation>
            Image/Figure/Chart, etc. (might have extractable text)
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="block" type="inno:ImageBlockType" />
        </xs:sequence>
        <xs:attribute name="id" use="required" type="xs:ID"/>
        <xs:attribute name="type" type="xs:string" />
    </xs:complexType>

    <xs:complexType name="ImageBlockType">
        <xs:annotation>
            <xs:documentation>
            An image block
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="inno:RichTextType">
                <xs:attributeGroup ref="inno:BlockAttributes" />
                <xs:attribute name="ocr-confidence" type="xs:decimal"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="RichTextType" mixed="true">
        <xs:annotation>
            <xs:documentation>
            Defines the structure of the textual content.
            The usual mixture of i,b,u,sup,sub,color,br and font.
            </xs:documentation>
        </xs:annotation>

        <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="br" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                    Hard line break.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="i" minOccurs="0" maxOccurs="unbounded" type="inno:RichTextType">
                <xs:annotation>
                    <xs:documentation>
                    Italic text.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="b" minOccurs="0" maxOccurs="unbounded" type="inno:RichTextType">
                <xs:annotation>
                    <xs:documentation>
                    Bold text.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="u" minOccurs="0" maxOccurs="unbounded" type="inno:RichTextType">
                <xs:annotation>
                    <xs:documentation>
                    Underlined text.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="sub" minOccurs="0" maxOccurs="unbounded" type="inno:RichTextType">
                <xs:annotation>
                    <xs:documentation>
                    Subscript text.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="sup" minOccurs="0" maxOccurs="unbounded" type="inno:RichTextType">
                <xs:annotation>
                    <xs:documentation>
                    Superscript text.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>

            <xs:element name="nec" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                    Non-extractable character. Can only happen in PDF text extraction, when
                    character text belongs to a private unicode range or character code is invalid.
                    To display such a character one needs to capture an image.

                    Attributes:
                        bbox - bounding box (in PDF coordinates) of this character
                        fid  - font id (PDF object number followed by colon and PDF generation number)
                        cid  - the id of this character in the font table
                        code - unicode point that font associates with this character
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:attribute name="bbox" use="required" type="inno:BoundingBox" />
                    <xs:attribute name="cid" use="required" type="xs:integer" />
                    <xs:attribute name="fid" use="required" type="inno:FontId" />
                    <xs:attribute name="code" use="required" type="inno:CharacterCode" />
                </xs:complexType>
            </xs:element>

            <xs:element name="color" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                    Colored text span.
                    Please note that even though this schema seem to allow the color within color
                    recursion, this never happens in practice.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:complexContent>
                        <xs:extension base="inno:RichTextType">
                            <xs:attribute name="rgb" use="required" type="inno:RGBColor"/>
                        </xs:extension>
                    </xs:complexContent>
                </xs:complexType>
            </xs:element>

            <xs:element name="font" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                    Specific font.
                    Please note that even though this schema seem to allow the font within font
                    recursion, this never happens in practice. When text extraction engine is required
                    to extract font info, expect to have all text spans wrapped in font. When font info
                    is not extracted, expect to never see any font information in the rich text.
                    </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                    <xs:complexContent>
                        <xs:extension base="inno:RichTextType">
                            <xs:attribute name="font-name" use="required" type="xs:string"/>
                            <xs:attribute name="font-size" use="required" type="inno:FontSizeInPoints"/>
                        </xs:extension>
                    </xs:complexContent>
                </xs:complexType>
            </xs:element>
        </xs:choice>
    </xs:complexType>

    <xs:simpleType name="FontSizeInPoints">
        <xs:annotation>
            <xs:documentation>
            Value for "font-size" attribute - a decimal number with "pt" suffix. Example:
                8.5pt
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="\d+(\.\d+)?pt"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="BoundingBox">
        <xs:annotation>
            <xs:documentation>
            Value for "bbox" attribute - a 4-tuple of X0,Y0,X1,Y1
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="\d+(\.\d+)? \d+(\.\d+)? \d+(\.\d+)? \d+(\.\d+)?"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="HorizontalAlignment">
        <xs:annotation>
            <xs:documentation>
            Value for "halign" attribute of a table cell
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="left"/>
            <xs:enumeration value="center"/>
            <xs:enumeration value="right"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="VerticalAlignment">
        <xs:annotation>
            <xs:documentation>
            Value for "valign" attribute of a table cell
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:enumeration value="top"/>
            <xs:enumeration value="center"/>
            <xs:enumeration value="bottom"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="CharacterCode">
        <xs:annotation>
            <xs:documentation>
            Character code, as hexadecimal-formatted number
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="0x[\da-fA-F]+"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="FontId">
        <xs:annotation>
            <xs:documentation>
            PDF font id
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="\d+:\d+"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="RGBColor">
        <xs:annotation>
            <xs:documentation>
            Color spec, HTML-style.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="#[\da-fA-F]{6,6}"/>
        </xs:restriction>
    </xs:simpleType>

</xs:schema>
